# ─────────────────────────────
# Trading_MVP – Check-point 2
# ─────────────────────────────

networks:
    trading-network:
        driver: bridge

services:
    # ───────── Exchange stub ─────────
    exchange_stub:
        build:
            context: ./src
            dockerfile: ExchangeStub/Dockerfile
        image: exchange_stub:local
        ports: ['7001:8081']
        environment:
            ASPNETCORE_URLS: http://+:8081
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8081/healthz']
            interval: 30s
            retries: 3
        networks: [trading-network]

    # ───────── Zookeeper ─────────
    zookeeper:
        image: bitnami/zookeeper:3.8.4
        container_name: zookeeper
        ports: ['2181:2181']
        environment:
            ALLOW_ANONYMOUS_LOGIN: 'yes'
            JVMFLAGS: '-Xms256m -Xmx256m'
        volumes:
            - ./data/zoo:/bitnami/zookeeper
        networks: [trading-network]

    # ───────── Kafka broker ─────────
    kafka:
        image: bitnami/kafka:3.7
        container_name: kafka
        ports: ['9092:9092']
        environment:
            KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
            ALLOW_PLAINTEXT_LISTENER: 'yes'
            KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
        depends_on:
            - zookeeper
        healthcheck:
            test: ['CMD-SHELL', "bash -c 'echo > /dev/tcp/localhost/9092'"]
            interval: 10s
            retries: 10
        volumes:
            - ./data/kafka:/bitnami/kafka
        networks: [trading-network]

    # ───────── RabbitMQ ─────────
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports: ['5672:5672', '15672:15672']
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
            interval: 10s
            retries: 10
        volumes:
            - ./data/rabbit:/var/lib/rabbitmq
        networks: [trading-network]

    # ───────── Gateway (SignalR) ─────────
    gateway:
        build:
            context: ./src
            dockerfile: Gateway/Dockerfile
        image: gateway:local
        container_name: gateway
        ports: ['8080:8080']
        environment:
            ASPNETCORE_URLS: http://+:8080
            RABBIT_HOST: rabbitmq
            RABBIT_EXCHANGE: market-data
        depends_on:
            - rabbitmq
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8080/healthz']
            interval: 30s
            retries: 3
        networks: [trading-network]

    # ───────── Collector (WS ➜ Kafka) ─────────
    collector:
        build:
            context: ./src
            dockerfile: Collector/Dockerfile
        image: collector:local
        container_name: collector
        environment:
            EXCHANGE_WS_URL: ws://exchange_stub:8081/ws/ticker?symbol=BTCUSDT
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            KAFKA_TOPIC_RAW: ticks.raw
        depends_on:
            - kafka
            - exchange_stub
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s
        networks: [trading-network]

    # ───────── Normaliser (Kafka ➜ Kafka) ─────────
    normaliser:
        build:
            context: ./src
            dockerfile: Normaliser/Dockerfile
        image: normaliser:local
        environment:
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            TOPIC_IN: ticks.raw
            TOPIC_OUT: ticks.norm
        depends_on:
            - kafka
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s
        networks: [trading-network]

    # ───────── Bridge (Kafka ➜ RabbitMQ) ─────────
    bridge:
        build:
            context: ./src
            dockerfile: Bridge/Dockerfile
        image: bridge:local
        container_name: bridge
        ports: ['8083:8083']
        environment:
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            TOPIC_IN: ticks.norm
            RABBIT_HOST: rabbitmq
            RABBIT_EXCHANGE: market-data
        depends_on:
            - kafka
            - rabbitmq
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8083/healthz']
            interval: 30s
            retries: 3
            start_period: 15s
        networks: [trading-network]

    # ───────── Kafdrop UI ─────────
    kafdrop:
        image: obsidiandynamics/kafdrop
        ports: ['9000:9000']
        environment:
            KAFKA_BROKERCONNECT: kafka:9092
        depends_on:
            - kafka
        networks: [trading-network]

    # ───────── React front-end ─────────
    webui:
        build:
            context: ./webui
        image: webui:local
        container_name: webui
        ports: ['80:80']
        environment:
            REACT_APP_SIGNALR_URL: http://gateway:8080/hub/market
        depends_on:
            - gateway
        networks: [trading-network]
