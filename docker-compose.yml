version: '3.9'

networks:
    trading-network:
        driver: bridge

services:
    # ─────────────────── Exchange stub ────────────────────
    exchange_stub:
        build:
            context: ./src
            dockerfile: ExchangeStub/Dockerfile
        image: exchange_stub:local
        ports: ['7001:8081']
        environment:
            ASPNETCORE_URLS: http://+:8081
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8081/healthz']
            interval: 30s
            retries: 3
        networks: [trading-network]

    # ─────────────────── Zookeeper (single-node) ──────────
    zookeeper:
        image: bitnami/zookeeper:3.8.4 # pin exact tag
        container_name: zookeeper
        ports: ['2181:2181']
        environment:
            ALLOW_ANONYMOUS_LOGIN: 'yes'
            JVMFLAGS: '-Xms256m -Xmx256m' # light JVM for WSL2
        # ⬇️  use Bitnami’s own health-check; no need for ours
        networks: [trading-network]

    # ─────────────────── Kafka broker ─────────────────────
    kafka:
        image: bitnami/kafka:3.7
        container_name: kafka
        ports: ['9092:9092']
        environment:
            KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
            ALLOW_PLAINTEXT_LISTENER: 'yes'
        depends_on: # wait only for container start
            - zookeeper
        healthcheck:
            test: ['CMD-SHELL', "bash -c 'echo > /dev/tcp/localhost/9092'"]
            interval: 10s
            retries: 10
        networks: [trading-network]

    # ─────────────────── RabbitMQ ─────────────────────────
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports: ['5672:5672', '15672:15672']
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
            interval: 10s
            retries: 10
        networks: [trading-network]

    # ─────────────────── Gateway (SignalR) ────────────────
    gateway:
        build:
            context: ./src
            dockerfile: Gateway/Dockerfile
        image: gateway:local
        container_name: gateway
        ports: ['8080:8080']
        environment:
            ASPNETCORE_URLS: http://+:8080
            RABBIT_HOST: rabbitmq
        depends_on:
            rabbitmq: { condition: service_healthy }
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8080/healthz']
            interval: 30s
            retries: 3
        networks: [trading-network]

    # ─────────────────── Collector (WS ➜ Kafka) ───────────
    collector:
        build:
            context: ./src
            dockerfile: Collector/Dockerfile
        image: collector:local
        container_name: collector
        environment:
            EXCHANGE_WS_URL: ws://exchange_stub:8081/ws/ticker?symbol=BTCUSDT
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        depends_on:
            gateway: { condition: service_started }
            kafka: { condition: service_healthy }
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s
        networks: [trading-network]

    # ─────────────────── Normaliser (Kafka ➜ Kafka) ───────
    normaliser:
        build:
            context: ./src
            dockerfile: Normaliser/Dockerfile
        image: normaliser:local
        environment:
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        depends_on:
            kafka: { condition: service_healthy }
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s
        networks: [trading-network]

    # ─────────────────── Bridge (Kafka ➜ RabbitMQ) ────────
    bridge:
        build:
            context: ./src
            dockerfile: Bridge/Dockerfile
        image: bridge:local
        ports: ['8083:8083']
        environment:
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            RABBIT_HOST: rabbitmq
            RABBIT_QUEUE: market.ticks
        depends_on:
            kafka: { condition: service_healthy }
            rabbitmq: { condition: service_healthy }
        healthcheck:
            test: ['CMD', 'curl', '-fs', 'http://localhost:8083/healthz']
            interval: 30s
            retries: 3
            start_period: 15s
        networks: [trading-network]

    # ─────────────────── Kafdrop UI ───────────────────────
    kafdrop:
        image: obsidiandynamics/kafdrop
        ports: ['9000:9000']
        environment:
            KAFKA_BROKERCONNECT: kafka:9092
        depends_on:
            kafka: { condition: service_healthy }
        networks: [trading-network]

    # ─────────────────── React front-end ──────────────────
    webui:
        build:
            context: ./webui
        image: webui:local
        container_name: webui
        ports: ['80:80']
        environment:
            REACT_APP_SIGNALR_URL: http://gateway:8080/hub/market
        depends_on:
            gateway: { condition: service_started }
        networks: [trading-network]
