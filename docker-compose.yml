version: '3.8'

services:
    exchange_stub:
        build:
            context: ./src
            dockerfile: ExchangeStub/Dockerfile
        ports:
            - '7001:8080'
        environment:
            ASPNETCORE_URLS: http://+:8080
        networks:
            - trading-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
            interval: 30s
            retries: 3
            start_period: 5s

    collector:
        image: mcr.microsoft.com/dotnet/runtime:8.0
        container_name: collector
        build:
            context: ./src
            dockerfile: Collector/Dockerfile
        environment:
            - EXCHANGE_WS_URL=ws://exchange_stub:8080/ws/ticker?symbol=BTCUSDT
            # Add Kafka bootstrap server for later steps
            - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        networks:
            - trading-network
        depends_on:
            - gateway
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s

    gateway:
        image: mcr.microsoft.com/dotnet/aspnet:8.0
        container_name: gateway
        build:
            context: ./src
            dockerfile: Gateway/Dockerfile
        ports:
            - '8080:8080'
        environment:
            - ASPNETCORE_URLS=http://+:8080
            # Add RabbitMQ host for later steps
            - RABBITMQ_HOST=rabbitmq
        networks:
            - trading-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:5000/healthz']
            interval: 30s
            retries: 3
            start_period: 5s

    webui:
        build:
            context: ./webui
        container_name: webui
        ports:
            - '80:80'
        networks:
            - trading-network
        depends_on:
            - gateway
        environment:
            - REACT_APP_SIGNALR_URL=http://gateway:8080/hub/market

    # --- New services below ---

    zookeeper:
        image: bitnami/zookeeper:3.8
        container_name: zookeeper
        ports:
            - '2181:2181'
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - trading-network

    kafka:
        image: bitnami/kafka:3.7
        container_name: kafka
        ports:
            - '9092:9092'
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper
        networks:
            - trading-network

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - '5672:5672' # AMQP protocol
            - '15672:15672' # Management UI
        environment:
            - RABBITMQ_DEFAULT_USER=guest
            - RABBITMQ_DEFAULT_PASS=guest
        networks:
            - trading-network

networks:
    trading-network:
        driver: bridge
